package database

import (
	"eskimoe-client/api"
	"eskimoe-client/lib"
	"log"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

var Database *gorm.DB

/*
User UniqueID is a UUID generated by the client.
User UniqueToken is a new random 256-bit token generated by the client and hashed with device's MAC address.
*/
func newUser() *User {
	uniqueID := lib.GenerateUUID()
	uniqueToken := lib.GenerateToken()

	return &User{
		UniqueID:    uniqueID,
		UniqueToken: uniqueToken,
		Current:     true,
	}
}

func GetCurrentUser() User {
	var user User

	Database.Where("current = ?", true).First(&user)

	return user
}

func GetServers(user User) []Server {
	var servers []Server

	Database.Model(&user).Association("Servers").Find(&servers)

	return servers
}

func JoinServer(user User, server Server) error {
	serverURL := server.URL
	member := api.JoinMemberRequest{
		UniqueID:    user.UniqueID,
		UniqueToken: user.UniqueToken,
		DisplayName: user.DisplayName,
	}

	_, err := api.JoinServerAsMember(serverURL, member)

	if err != nil {
		return err
	}

	Database.Model(&user).Association("Servers").Append(&server)

	return nil
}

func Initialize() {
	var err error
	Database, err = gorm.Open(sqlite.Open("eskimoe.db"), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Silent),
	})
	if err != nil {
		log.Fatal("Error opening database:", err)
	}

	Database.AutoMigrate(&User{}, &Server{})

	// Create a user if there isn't one
	currentUser := GetCurrentUser()

	if currentUser.ID == 0 {
		user := *newUser()
		Database.Create(&user)
	}
}
